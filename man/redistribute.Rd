% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/redistribute.R
\name{redistribute}
\alias{redistribute}
\title{Redistribute Data}
\usage{
redistribute(source, target, map = list(), source_id = "GEOID",
  target_id = source_id, target_weight = "population",
  source_variable = NULL, source_value = NULL, outFile = NULL,
  overwrite = FALSE, verbose = FALSE)
}
\arguments{
\item{source}{A matrix-like object you want to distribute from; usually this will be
the real or more complete dataset, and is often at a lower resolution / higher level.}

\item{target}{A matrix-like object you want to distribute to: usually this will be
the dataset you want but isn't available, and is often at a higher resolution / lower level.}

\item{map}{A list with entries named with \code{source} IDs, containing vectors of associated
\code{target} IDs.}

\item{source_id, target_id}{Name of a column in \code{source} / \code{target},
or a vector containing IDs.}

\item{target_weight}{Name of a column in \code{target}, or a vector containing target weights.}

\item{source_variable, source_value}{If \code{source} is tall (with variables spread across
rows rather than columns), specifies names of columns in \code{source} containing variable names
and values for conversion.}

\item{outFile}{Path to a CSV file in which to save results.}

\item{overwrite}{Logical; if \code{TRUE}, will overwrite an existing \code{outFile}.}

\item{verbose}{Logical; if \code{TRUE}, will show status messages.}
}
\value{
A \code{data.frame} the same dimensions as \code{target}, with an initial column
(\code{id}) containing \code{target_ids}, and additional columns from \code{source}.
}
\description{
Distribute data from a source frame to a target frame.
}
\examples{
# minimal example
source <- c(a = 1, b = 2)
target <- 1:5
(redistribute(source, target, verbose = TRUE))

# multi-entity example
source <- data.frame(id = c("a", "b"), cat = c("aaa", "bbb"), num = c(1, 2))
target <- data.frame(
  id = sample(paste0(c("a", "b"), rep(1:5, 2))),
  population = sample.int(1e5, 10)
)
(redistribute(source, target, verbose = TRUE))
}
